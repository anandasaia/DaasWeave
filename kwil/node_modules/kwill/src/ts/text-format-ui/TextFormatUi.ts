import {forIn} from "lodash";
import {findOne} from "../utils/dom/element/Find";
import {isFramed} from "./FrameUtils";
import {TextFormatPopup} from './ui-components/TextFormatPopup';
import {TextFormatUiBase} from "./ui-components/TextFormatUiBase";
import {IKwillFormatUiOptions} from "./createTextFormatUi";

let instances: any;


/**
 * create a new editor instance instance
 * @param options
 * @return {TextFormatUiBase}
 */
export function createTextFormatUi(options: IKwillFormatUiOptions) : TextFormatUiBase
{
    //  get the id for an instance, based on its selector
    //TODO  this might need tweaking for if an element is passed in

    const instanceID: string = getInstanceID(<string>options.popupSelector);

    //  is there an existing instance with this ID?

    let instance: TextFormatUiBase = getTextFormatUi(instanceID)

    //  if so, return it

    if (instance) return instance;

    //  test the provided options and create the appropriate format UI

    if (selectorIsValid(options.popupSelector))
    {
        //  create a text format popup

        instance = new TextFormatPopup(options);

        //  save the new format UI instance

        saveInstance(options.popupSelector + '--popup', instance);

        //  bootstrap the instance

        instance.bootstrap();

        //  return the new instance

        return instance;
    }
}


/**
 * has the user specified an element to use as a text format popup?
 * @param selector
 * @return {any}
 */
function selectorIsValid(selector: string | HTMLElement) : boolean
{
    let element: HTMLElement;

    try
    {
        //  get the popup element, using the selector options value

        element = findOne(selector);

        //  test that we have a valid element and it hasn't already been placed in a frame

        return element && ! isFramed(element);
    }
    catch(e)
    {
        return false;
    }
}


/**
 * retrieve a text format UI instance by instanceID
 * @param id
 */
export function getTextFormatUi(id: string) : TextFormatUiBase
{
    return getInstances()[id];
}


/**
 * destroy a text format UI instance by instanceID
 * @param id
 */
export function destroyTextFormatUi(id: string)
{
    //  find an instance and destroy it

    getTextFormatUi(id).destroy();

    //  then remove the reference to it

    delete instances[id];
}


/**
 * destroy all text format UI instances
 */
export function destroyAllTextFormatUi()
{
    forIn(getInstances(), (instance: TextFormatUiBase, id: string) => destroyTextFormatUi(id));
}


/**
 * save a new instance of this class
 * @param instance
 * @param id
 */
function saveInstance(id: string, instance: TextFormatUiBase)
{
    getInstances()[id] = instance;
}


/**
 * get the instances dictionary
 * @returns {any|{}}
 */
function getInstances() : any
{
    return instances || (instances = {});
}


/**
 * get an instance id
 * @param selector
 * @returns {string}
 */
function getInstanceID(selector: string)
{
    return selector + '--popup';
}