import {toArray, get, forEach} from 'lodash';
import {loadFontsForFrame} from '../utils/dom/style/FontLoader';
import {IKwillFormatUiOptions} from "./createTextFormatUi";


/**
 * test whether a target is (or is in) an iframe
 * @param target
 * @return {boolean}
 */
export function isFramed(target: HTMLElement) : boolean
{
    return ( ! target) || target.tagName === 'IFRAME';
}


/**
 * create and style an iframe to match a target element
 * @param target
 * @param options
 * @param frameReadyCallback
 * @return {HTMLIFrameElement}
 */
export function captureElement(target: HTMLElement, options: IKwillFormatUiOptions, frameReadyCallback: (iframe: HTMLIFrameElement) => void) : HTMLIFrameElement
{
    //  create the iframe

    const iframe: HTMLIFrameElement = document.createElement('iframe');

    //  hide the frame while we populate it

    iframe.style.setProperty('position', 'absolute');
    iframe.style.setProperty('left', '-9999px');

    //  copy classes from the target to the frame

    iframe.setAttribute('class', target.getAttribute('class'));

    //  add an on-load function to the frame so we can tell when it's ready

    iframe.onload = () =>
    {
        console.log('on frame load');

        //  populate the frame with content

        populateFrame(iframe, target, options);

        //  call the frame-ready callback

        frameReadyCallback(iframe);
    };

    //  add the frame to the page before the target

    target.parentElement.insertBefore(iframe, target);

    //  return the iframe
    console.log('returning frame');

    return iframe;
}


/**
 * move the target's contents into the iframe
 * @param iframe
 * @param target
 * @param options
 */
function populateFrame(iframe: HTMLIFrameElement, target: HTMLElement, options: IKwillFormatUiOptions)
{
    //  move the target's contents to the frame

    toArray(target.children).forEach(node => iframe.contentDocument.body.appendChild(node));

    //  copy styles from the parent to the frame;
    //  this lets us recreate any format UI styles that have been set in the parent

    addExternalStyles(iframe, target, options);

    //  load fonts needed in the iframe

    loadFontsForFrame(iframe, options);

    //  remove the target element

    target.parentElement.removeChild(target);

    //  restore the frame to visibility

    iframe.setAttribute('style', null);
}


/**
 * add some external styles to the frame
 * @param iframe
 * @param target
 * @param options
 */
function addExternalStyles(iframe: HTMLIFrameElement, target: HTMLElement, options: IKwillFormatUiOptions)
{
    //  copy stylesheets from the parent to the frame

    cloneParentStylesheets(iframe);

    //  load any additional style sheets that have been specified

    loadAdditionalStylesheets(iframe, options);

    //  create and populate an internal stylesheet in the frame

    addInternalStyles(iframe);
}


/**
 * clone all stylesheets from the parent window to the iframe
 * @param iframe
 */
function cloneParentStylesheets(iframe: HTMLIFrameElement)
{
    //  get all link elements with rel attributes from the parent's head;
    //  this should copy any linked stylesheets

    const links: Element[] = toArray(document.getElementsByTagName('LINK')).filter(node => node.getAttribute('rel').toLowerCase() === 'stylesheet');

    //  get all style elements;
    //  this should copy any inline styles that have been created in the parent document

    const stylesheets: Element[] = toArray(document.getElementsByTagName('STYLE'));

    //  then for each element, copy it to the frame

    links.concat(stylesheets).map(node => iframe.contentDocument.head.appendChild(node.cloneNode(true)));
}


/**
 * add some internal styles to the iframe
 * @param iframe
 */
function addInternalStyles(iframe: HTMLIFrameElement)
{
    let stylesheet: HTMLStyleElement,
        css: CSSStyleSheet;

    //  create a new stylesheet in the frame

    stylesheet = iframe.contentDocument.createElement('style');

    //  append it to the document

    iframe.contentDocument.head.appendChild(stylesheet);

    //  get a reference to the rules

    css = <CSSStyleSheet>stylesheet.sheet;

    //  style the frame and body; using some naughty important flags here to stop styles from the parent window breaking the frame

    css.insertRule('html, body { display: flex !important; width: auto !important; height: auto !important; }', 0);
    css.insertRule('body { margin: 0 !important; overflow: hidden; }', 0);
}


/**
 * clone all stylesheets from the parent window to the iframe
 * @param iframe
 * @param options
 */
function loadAdditionalStylesheets(iframe: HTMLIFrameElement, options: IKwillFormatUiOptions)
{
    //  get the list of additional stylesheets to load

    const stylesheets: string[] = get(options, 'stylesheets', []);

    //  then load each style sheet in turn

    forEach(stylesheets, url => loadAdditionalStylesheet(iframe, url));
}


/**
 * load an additional stylesheet into the frame
 * @param iframe
 * @param url
 */
export function loadAdditionalStylesheet(iframe: HTMLIFrameElement, url: string)
{
    //  create a new link element in the frame
    
    const link: HTMLLinkElement = iframe.contentDocument.createElement('link');
    
    //  populate it
    
    link.setAttribute('rel', 'stylesheet');
    link.setAttribute('type', 'text/css');
    link.setAttribute('media', 'all');

    //  set the href attribute to start loading the CSS

    link.setAttribute('href', url);

    //  append the link to the document head

    iframe.contentDocument.head.appendChild(link);
}