import * as log from "loglevel";
import {defaultsDeep, uniqueId} from "lodash";
import {findOne} from '../utils/dom/element/Find';
import {IKwillInstanceOptions} from "../editor/createKwillEditor";
import {IKwillFormatUiOptions} from "../text-format-ui/createTextFormatUi";


/**
 * test whether the provided options are valid
 * @param options
 * @returns {boolean}
 */
export function areOptionsValid(options: IKwillInstanceOptions) : boolean
{
    //  if no options have been provided, return false

    if ( ! options) return;

    //  if we do have options, test whether we can find a valid element

    return isEditorSelectorValid(options);
}


/**
 * can we find a valid editable element with the given selector?
 * @param options
 */
export function isEditorSelectorValid(options: IKwillInstanceOptions) : boolean
{
    let element: HTMLElement;

    try
    {
        //  find the element to use as our editable text area

        element = findOne(options.selector);

        return !! element;
    }
    catch(e)
    {
        log.warn('no editor element found for instance ID:', options.id);

        return false;
    }
}


///**
// * can we find a valid text format UI element with the given selector?
// * @param options
// */
//export function isTextFormatPopupUiSelectorValid(options: IKwillFormatUiOptions) : boolean
//{
//    let element: HTMLElement;
//
//    try
//    {
//        //  find the element to use as our editable text area
//
//        element = findOne(options.selector);
//
//        return !! element;
//    }
//    catch(e)
//    {
//        log.warn('no editor element found for instance ID:', options.id);
//
//        return false;
//    }
//}


/**
 * populate default properties in an editor options object
 * @param options
 * @return {IKwillInstanceOptions}
 */
export function populateDefaultEditorOptions(options: IKwillInstanceOptions) : IKwillInstanceOptions
{
    let defaults: IKwillInstanceOptions;

    //  get default options

    defaults =
        {
            id: uniqueId(),
            style:
                {
                    textAlign: 'left',
                    lineHeight: '1',
                    letterSpacing: '0px'
                },
            interaction:
                {
                    show_popup_on_click: false,
                    expand_x: true,
                    expand_y: true
                }
        };

    //  return the populated options object

    return <IKwillInstanceOptions>defaultsDeep(options, defaults);
}


/**
 * populate default properties in an editor options object
 * @param options
 * @return {IKwillInstanceOptions}
 */
export function populateDefaultFormatUiOptions(options: IKwillFormatUiOptions) : IKwillFormatUiOptions
{
    let defaults: IKwillFormatUiOptions;

    //  get default options

    defaults = {};

    //  return the populated options object

    return <IKwillInstanceOptions>defaultsDeep(options, defaults);
}