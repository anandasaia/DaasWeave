import * as log from 'loglevel';
import {getSignal} from "../events/GlobalEvents";
import {clearSelection} from './Selections';
import {eventWasInternal} from '../utils/dom/interaction/EventChecker';
import {stopTrackingEdits} from '../editor/track-changes/TrackChanges';
import {KWILL_CONSTS} from '../constants/Constants';


/**
 * add global listeners common to all instances
 */
export function addGlobalListeners()
{
    //  listen for mouse-down and mouse-up events on the main document

    document.addEventListener('mousedown', onDocumentMouseDown);
    document.addEventListener('mouseup', onDocumentMouseUp);
    document.addEventListener('scroll', onDocumentScroll);

    //  when the clear selection event is triggered, clear all selections on the page;
    //  this is generally triggered by the browser but may be needed if we're mixing iframes and non-iframe editors

    getSignal(KWILL_CONSTS.events.CLEAR_SELECTION).add(clearSelection);
}


/**
 * when the user presses the mouse button down on the document
 * @param mouseEvent
 */
let onDocumentMouseDown = (mouseEvent: MouseEvent) =>
{
    //  hide the text format popup

    getSignal(KWILL_CONSTS.events.HIDE_TEXT_FORMAT_POPUP).dispatch();
};


/**
 * when the user releases the mouse button over the document
 * @param mouseEvent
 */
let onDocumentMouseUp = (mouseEvent: MouseEvent) =>
{
    //  did the event take place with a kwill-related element? if so, stop here

    //if (eventWasInternal(mouseEvent)) return;

    //  if it took place outside anything kwill-related, assume the user has just stopped editing an instance

    stopTrackingEdits();
};


/**
 * when the user scrolls in the main document
 * @param mouseEvent
 */
let onDocumentScroll = (mouseEvent: MouseEvent) =>
{
    //  did the event take place with a kwill-related element? if so, stop here

    //if (eventWasInternal(mouseEvent)) return;

    //  hide the text format popup

    getSignal(KWILL_CONSTS.events.HIDE_TEXT_FORMAT_POPUP).dispatch();
};


/**
 * add global listeners common to all instances
 */
export function removeGlobalListeners()
{
    //  remove listeners from the document

    document.removeEventListener('mousedown', onDocumentMouseDown);
    document.removeEventListener('mouseup', onDocumentMouseUp);

    //  remove all listeners on the signals


}