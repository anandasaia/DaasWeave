import * as log from 'loglevel';
import {styleSelection} from "./SetStyle";
import {sniffStyle, sniffFormats} from '../../info/format-sniffer/FormatSniffer';
import {KWILL_CONSTS} from "../../../constants/Constants";
import {hasUnits} from "../utils/UnitsUtils";


/**
 * set font-size
 * @param fontSize
 */
export function setFontSize(fontSize: string)
{
    styleSelection(KWILL_CONSTS.textFormats.FONT_SIZE, parseFontSize(fontSize));
}


/**
 * ensure the font-size string is in a usable format
 * @param fontSize
 */
function parseFontSize(fontSize: string) : string
{
    //  does the given string already include units? if so, let's use it

    // if (hasUnits(fontSize)) return parseInt(fontSize);

    //  if not, let's default to px

    return parseInt(fontSize) + 'px';
}


/**
 * extract font size from a variety of inputs
 * @param input
 * @returns {string}
 */
export function extractFontSize(input: any) : string
{
    let font_size: string;

    //  check the input we've been given;
    //  if might be a straight value, in which case we can use it directly,
    //  or an event from the UI, in which case we need to find the element's current value,
    //  or an instruction to increment the existing size value of the selected element

    switch (typeof input)
    {
        case 'string':

            font_size = isIncremental(input) ? calculateIncrement(input) : input;

            break;

        case 'number':

            font_size = input.toString();

            break;

        case 'object':

            font_size = input.target.value;

            break;
    }

    return font_size;
}


/**
 * is the input an incremental string?
 * @param input
 * @returns {boolean}
 */
function isIncremental(input: string) : boolean
{
    return input.indexOf('-') + input.indexOf('+') < 0;
}


/**
 * sniff the current font size of the selection and increment by the required amount
 * @param input
 */
function calculateIncrement(input: string)
{
    return sniffStyle('font-size') + parseFloat(input);
}