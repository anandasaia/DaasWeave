import * as log from 'loglevel';
import {includes} from "lodash";
import {getRange} from "./Range";

/**
 * discover all nodes within a given range
 * @returns {Node[]}
 */
export function getNodesInRange() : HTMLElement[]
{
    let range: Range,
        start: Node,
        end: Node,
        commonAncestor: Node,
        nodes: Node[],
        node: Node;

    //  get the current selection range

    range = getRange();

    //  is there a selection? if not then return an empty array

    if ( ! range) return [];

    //  if we do have a selection, continue

    start = range.startContainer;
    end = range.endContainer;
    commonAncestor = range.commonAncestorContainer;
    nodes = [];

    //  walk parent nodes from start to common ancestor

    for (node = start.parentNode; node; node = node.parentNode)
    {
        nodes.push(node);

        if (node == commonAncestor) break;
    }

    nodes.reverse();

    //  walk children and siblings from start until end is found

    for (node = start; node; node = getNextNode(node))
    {
        nodes.push(node);

        if (node == end) break;
    }

    return <HTMLElement[]>nodes;
}


/**
 * find the next node in the range
 * @param node
 * @returns {Node}
 */
function getNextNode(node: Node) : Node
{
    //  if the node has any children, return the first child

    if (node.firstChild) return node.firstChild;

    //  otherwise, walk back up the DOM until we find a sibling node

    while (node)
    {
        if (node.nextSibling) return node.nextSibling;

        node = node.parentNode;
    }
}


/**
 * get only usable nodes in the current selection
 * @returns {Node[]}
 */
export function getBlockLevelNodesInRange() : HTMLElement[]
{
    return getTagsInRange(['P', 'IMG']);
}


/**
 * get only usable nodes in the current selection
 * @returns {Node[]}
 */
export function getTextNodesInRange() : HTMLElement[]
{
    return getTagsInRange(['P', 'IMG', 'FONT', 'B', 'I', 'U', 'STRIKE', 'SPAN']);
}


/**
 * get all tags of specific types within the current selection
 * @param tags
 * @returns {HTMLElement[]}
 */
export function getTagsInRange(tags: string[]) : HTMLElement[]
{
    return getNodesInRange().filter(element => includes(tags, (<HTMLElement>element).tagName));
}