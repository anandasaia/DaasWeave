"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var Find_1 = require("../../utils/dom/element/Find");
var FrameUtils_1 = require("../FrameUtils");
var FormatInteractions_1 = require("../interactions/FormatInteractions");
var UpdateState_1 = require("../interactions/UpdateState");
var Constants_1 = require("../../constants/Constants");
var GlobalEvents_1 = require("../../events/GlobalEvents");
var ColourPicker_1 = require("./ColourPicker");

var TextFormatUiBase = function () {
    function TextFormatUiBase(options) {
        _classCallCheck(this, TextFormatUiBase);

        this.options = options;
    }

    _createClass(TextFormatUiBase, [{
        key: "bootstrap",
        value: function bootstrap() {
            var _this = this;

            FrameUtils_1.captureElement(Find_1.findOne(this.options.popupSelector), this.options, function (iframe) {
                return _this.onFrameReady(iframe);
            });
        }
    }, {
        key: "onFrameReady",
        value: function onFrameReady(iframe) {
            this.frame = iframe;
            this.addListeners();
            this.setupColourPicker();
        }
    }, {
        key: "addListeners",
        value: function addListeners() {
            var _this2 = this;

            this.frame.contentDocument.addEventListener('mouseup', FormatInteractions_1.onTextFormatUiClick);
            this.frame.contentDocument.addEventListener('focus', FormatInteractions_1.onFormatUiFocus);
            this.frame.contentDocument.addEventListener('blur', FormatInteractions_1.onFormatUiBlur);
            this.frame.contentDocument.addEventListener('input', lodash_1.debounce(FormatInteractions_1.onFormatUiInteraction, 500));
            GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.TEXT_FORMAT).add(function (textFormat) {
                return UpdateState_1.updateUiState(_this2.frame, textFormat);
            });
        }
    }, {
        key: "setupColourPicker",
        value: function setupColourPicker() {
            var colourPicker = ColourPicker_1.setupColourPicker(this.frame, this.options);
            if (!colourPicker) return;
            GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.TEXT_FORMAT).add(function (textFormat) {
                return colourPicker.setColour(textFormat.color);
            });
            this.colourPicker = colourPicker;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            this.frame.parentElement.removeChild(this.frame);
            try {
                this.colourPicker.destroy();
            } catch (e) {}
        }
    }]);

    return TextFormatUiBase;
}();

exports.TextFormatUiBase = TextFormatUiBase;