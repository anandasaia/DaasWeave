"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var GlobalEvents_1 = require("../../events/GlobalEvents");
var Constants_1 = require("../../constants/Constants");
var FormatSniffer_1 = require("../../editor/info/format-sniffer/FormatSniffer");
var TextFormatUiBase_1 = require("./TextFormatUiBase");
var kulr_1 = require("kulr");
var Offset_1 = require("../../utils/dom/element/Offset");

var TextFormatPopup = function (_TextFormatUiBase_1$T) {
    _inherits(TextFormatPopup, _TextFormatUiBase_1$T);

    function TextFormatPopup() {
        _classCallCheck(this, TextFormatPopup);

        return _possibleConstructorReturn(this, (TextFormatPopup.__proto__ || Object.getPrototypeOf(TextFormatPopup)).apply(this, arguments));
    }

    _createClass(TextFormatPopup, [{
        key: "addListeners",
        value: function addListeners() {
            var _this2 = this;

            GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.SHOW_TEXT_FORMAT_POPUP).add(function (event) {
                return showTextFormatPopup(_this2.frame, event);
            });
            GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.HIDE_TEXT_FORMAT_POPUP).add(function () {
                return hideTextFormatPopup(_this2.frame);
            });
            GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.TEXT_FORMAT).add(function () {
                return focusTextFormatPopup(_this2.frame);
            });
            _get(TextFormatPopup.prototype.__proto__ || Object.getPrototypeOf(TextFormatPopup.prototype), "addListeners", this).call(this);
        }
    }]);

    return TextFormatPopup;
}(TextFormatUiBase_1.TextFormatUiBase);

exports.TextFormatPopup = TextFormatPopup;
function showTextFormatPopup(frame, event) {
    GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.TEXT_FORMAT).dispatch(FormatSniffer_1.sniffFormats());
    translateTextFormatPopup(frame, event);
    frame.classList.add('visible');
}
function translateTextFormatPopup(frame, event) {
    var offset = 20;
    var bounds = getBounds(frame);
    var mx = void 0,
        my = void 0;
    switch (window.getComputedStyle(frame).position) {
        case 'absolute':
            var elOffset = Offset_1.getElementOffset(frame.parentElement);
            mx = event.pageX - elOffset.left;
            my = event.pageY - elOffset.top;
            console.log('mouse position', event.pageX, event.pageY, elOffset);
            break;
        case 'fixed':
            mx = event.clientX;
            my = event.clientY;
            break;
    }
    var x = mx + (event.clientX < window.innerWidth * 0.5 ? offset : -(bounds.width + offset));
    var y = my + (event.clientY < window.innerHeight * 0.5 ? offset : -(bounds.height + offset));
    frame.style.setProperty('transform', 'translate(' + Math.round(x) + 'px,' + Math.round(y) + 'px)');
}
function getBounds(frame) {
    var bounds = void 0;
    frame.style.setProperty('visibility', 'hidden');
    frame.style.setProperty('display', 'block');
    frame.style.setProperty('width', frame.contentDocument.body.offsetWidth + 'px');
    frame.style.setProperty('height', frame.contentDocument.body.offsetHeight + 'px');
    bounds = frame.getBoundingClientRect();
    frame.style.setProperty('visibility', null);
    frame.style.setProperty('display', null);
    return bounds;
}
function hideTextFormatPopup(frame) {
    frame.classList.remove('visible');
    kulr_1.closeAllColourPickers();
}
function focusTextFormatPopup(frame) {
    frame.focus();
}