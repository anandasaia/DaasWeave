"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var FormatText_1 = require("../../editor/text-format/FormatText");
var Constants_1 = require("../../constants/Constants");
var GlobalEvents_1 = require("../../events/GlobalEvents");
var FormatSniffer_1 = require("../../editor/info/format-sniffer/FormatSniffer");
var TextEditor_1 = require("../../editor/TextEditor");
var TrackChanges_1 = require("../../editor/track-changes/TrackChanges");
exports.onTextFormatUiClick = function (event) {
    var target = void 0;
    target = findValidTarget(event);
    try {
        switch (target.tagName) {
            case 'INPUT':
                var input = void 0;
                input = target;
                input.select();
                return;
            case "SELECT":
                return;
        }
    } catch (e) {
        return;
    }
    exports.onFormatUiInteraction(event);
};
function findValidTarget(event) {
    var element = void 0,
        tagNames = void 0;
    element = event.target;
    tagNames = ['BUTTON', 'INPUT', 'SELECT', 'A'];
    while (element && element.tagName) {
        if (lodash_1.includes(tagNames, element.tagName)) return element;
        element = element.parentElement;
    }
}
exports.findValidTarget = findValidTarget;
exports.onFormatUiInteraction = function (event) {
    var format = void 0,
        value = void 0;
    format = getDataFormatFromEvent(event.target);
    value = getDataValueFromEvent(event.target);
    if (!format) return;
    FormatText_1.formatText(format, value);
    GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.TEXT_FORMAT).dispatch(FormatSniffer_1.sniffFormats());
    TrackChanges_1.trackEdits(TextEditor_1.getActiveTextEditorID());
};
function targetIsButton(event) {
    return event.target.tagName === 'BUTTON';
}
exports.onFormatUiFocus = function (event) {
    console.log('focus');
};
exports.onFormatUiBlur = function (event) {
    console.log('blur');
};
exports.onFormatUiInput = function (event) {
    console.log('input');
};
function getDataFormatFromEvent(element) {
    var format = void 0;
    while (element && element.dataset) {
        format = element.dataset['format'];
        if (format) return format;
        element = element.parentElement;
    }
    return null;
}
function getDataValueFromEvent(element) {
    var value = void 0;
    while (element && element.dataset) {
        value = getDataValueFromElement(element);
        if (value) return value;
        element = element.parentElement;
    }
    return null;
}
exports.getDataValueFromEvent = getDataValueFromEvent;
function getDataValueFromElement(target) {
    return target.dataset['value'] || target.value;
}
exports.getDataValueFromElement = getDataValueFromElement;