"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var FormatInteractions_1 = require("./FormatInteractions");
var Constants_1 = require("../../constants/Constants");
var GetNodesInRange_1 = require("../../utils/dom/html/range/GetNodesInRange");
var UnitsUtils_1 = require("../../editor/text-format/utils/UnitsUtils");
function updateUiState(frame, textFormat) {
    if (!textFormat) return;
    Object.keys(textFormat).forEach(function (format) {
        return lodash_1.map(frame.contentDocument.body.querySelectorAll('[data-format=' + format + ']'), function (uiElement) {
            return updateTextFormatControl(uiElement, format, textFormat[format]);
        });
    });
}
exports.updateUiState = updateUiState;
function updateTextFormatControl(element, format, value) {
    switch (element.tagName) {
        case 'BUTTON':
            element.classList.toggle('active', value === FormatInteractions_1.getDataValueFromElement(element) || value === true);
            if (element.dataset['label'] !== undefined) element.textContent = element.dataset['label'] + value;
            break;
        case 'INPUT':
        case 'SELECT':
            switch (format) {
                case Constants_1.KWILL_CONSTS.textFormats.LINE_HEIGHT:
                    return element.value = UnitsUtils_1.stripUnits(getStyleValueFromSelection(format));
                case Constants_1.KWILL_CONSTS.textFormats.LETTER_SPACING:
                    return element.value = UnitsUtils_1.stripUnits(getStyleValueFromSelection(format));
                default:
                    return element.value = value;
            }
    }
}
function getStyleValueFromSelection(style) {
    var value = void 0;
    GetNodesInRange_1.getTextNodesInRange().reverse().some(function (element) {
        value = getStyleFromElement(element, style);
        return !!value;
    });
    return value;
}
function getStyleFromElement(element, style) {
    try {
        var value = void 0;
        while (element) {
            value = element.style.getPropertyValue(style);
            if (value) return value;
            element = element.parentElement;
        }
    } catch (e) {}
}
function convertNormal(value, substitute) {
    return value === 'normal' ? substitute : value;
}