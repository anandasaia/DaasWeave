"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var Range_1 = require("./Range");
function getNodesInRange() {
    var range = void 0,
        start = void 0,
        end = void 0,
        commonAncestor = void 0,
        nodes = void 0,
        node = void 0;
    range = Range_1.getRange();
    if (!range) return [];
    start = range.startContainer;
    end = range.endContainer;
    commonAncestor = range.commonAncestorContainer;
    nodes = [];
    for (node = start.parentNode; node; node = node.parentNode) {
        nodes.push(node);
        if (node == commonAncestor) break;
    }
    nodes.reverse();
    for (node = start; node; node = getNextNode(node)) {
        nodes.push(node);
        if (node == end) break;
    }
    return nodes;
}
exports.getNodesInRange = getNodesInRange;
function getNextNode(node) {
    if (node.firstChild) return node.firstChild;
    while (node) {
        if (node.nextSibling) return node.nextSibling;
        node = node.parentNode;
    }
}
function getBlockLevelNodesInRange() {
    return getTagsInRange(['P', 'IMG']);
}
exports.getBlockLevelNodesInRange = getBlockLevelNodesInRange;
function getTextNodesInRange() {
    return getTagsInRange(['P', 'IMG', 'FONT', 'B', 'I', 'U', 'STRIKE', 'SPAN']);
}
exports.getTextNodesInRange = getTextNodesInRange;
function getTagsInRange(tags) {
    return getNodesInRange().filter(function (element) {
        return lodash_1.includes(tags, element.tagName);
    });
}
exports.getTagsInRange = getTagsInRange;