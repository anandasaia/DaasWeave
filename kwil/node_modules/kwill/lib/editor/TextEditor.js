"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var Find_1 = require("../utils/dom/element/Find");
var Interaction_1 = require("./interaction/Interaction");
var ValidateOptions_1 = require("../options/ValidateOptions");
var Range_1 = require("../utils/dom/html/range/Range");
var instances, activeInstanceID;

var TextEditor = function () {
    function TextEditor(instanceID, options) {
        _classCallCheck(this, TextEditor);

        this.instanceID = instanceID;
        this.options = options;
    }

    _createClass(TextEditor, [{
        key: "bootstrap",
        value: function bootstrap() {
            this.element = Find_1.findOne(this.options.selector);
            this.setDefaultContent();
            this.setDefaultStyles();
            Interaction_1.addTextElementListeners(this.instanceID);
        }
    }, {
        key: "setDefaultContent",
        value: function setDefaultContent() {
            try {
                var defaultContent = void 0;
                defaultContent = this.options.content.defaultHtml;
                if (defaultContent) this.content = this.options.content.defaultHtml;
            } catch (e) {}
        }
    }, {
        key: "setDefaultStyles",
        value: function setDefaultStyles() {
            this.element.setAttribute('contenteditable', 'true');
            this.element.style.outline = 'none';
            this.element.style.textAlign = this.options.style.textAlign;
            this.element.style.lineHeight = this.options.style.lineHeight;
            this.element.style.letterSpacing = this.options.style.letterSpacing;
        }
    }, {
        key: "getActiveParagraph",
        value: function getActiveParagraph() {
            var range = void 0,
                element = void 0;
            range = Range_1.getRange();
            element = range.startContainer;
            while (element && element.tagName !== 'P') {
                element = element.parentElement;
            }
            return element;
        }
    }, {
        key: "destroy",
        value: function destroy() {
            Interaction_1.removeTextElementListeners(this.instanceID);
            this.element.setAttribute('contenteditable', null);
        }
    }, {
        key: "width",
        get: function get() {
            return this.element.offsetWidth;
        }
    }, {
        key: "height",
        get: function get() {
            return this.element.offsetHeight;
        }
    }, {
        key: "paragraphs",
        get: function get() {
            return this.element.getElementsByTagName('p');
        }
    }, {
        key: "content",
        get: function get() {
            return this.element.innerHTML;
        },
        set: function set(content) {
            this.element.innerHTML = content;
        }
    }]);

    return TextEditor;
}();

exports.TextEditor = TextEditor;
function createTextEditor(instanceID, options) {
    var instance = void 0;
    if (!ValidateOptions_1.isEditorSelectorValid(options)) return;
    instance = new TextEditor(instanceID, options);
    saveInstance(instanceID, instance);
    instance.bootstrap();
    return instance;
}
exports.createTextEditor = createTextEditor;
exports.setActiveTextEditorID = function (instanceID) {
    return activeInstanceID = instanceID;
};
exports.getActiveTextEditorID = function () {
    return activeInstanceID;
};
exports.getActiveTextEditor = function () {
    return getTextEditor(exports.getActiveTextEditorID());
};
exports.clearActiveTextEditorID = function () {
    return activeInstanceID = null;
};
function getTextEditor(id) {
    return getInstances()[id];
}
exports.getTextEditor = getTextEditor;
function getAllTextEditors() {
    return getInstances();
}
exports.getAllTextEditors = getAllTextEditors;
function destroyTextEditor(id) {
    getTextEditor(id).destroy();
    delete instances[id];
}
exports.destroyTextEditor = destroyTextEditor;
function destroyAllTextEditors() {
    lodash_1.forIn(instances, function (instance, id) {
        return destroyTextEditor(id);
    });
}
exports.destroyAllTextEditors = destroyAllTextEditors;
function saveInstance(id, instance) {
    getInstances()[id] = instance;
}
function getInstances() {
    return instances || (instances = {});
}