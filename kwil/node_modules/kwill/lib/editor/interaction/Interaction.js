"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EditorInstanceUtils_1 = require("../EditorInstanceUtils");
var GlobalEvents_1 = require("../../events/GlobalEvents");
var PreventContentDeletion_1 = require("../utils/PreventContentDeletion");
var SignalBindingsManager_1 = require("./SignalBindingsManager");
var TrackChanges_1 = require("../track-changes/TrackChanges");
var Constants_1 = require("../../constants/Constants");
var TextEditor_1 = require("../TextEditor");
function addTextElementListeners(instanceID) {
    var textElement = void 0;
    textElement = EditorInstanceUtils_1.getEditorElement(instanceID);
    textElement.addEventListener('mousedown', function (event) {
        return onSelectionStart(instanceID, event);
    });
    textElement.addEventListener('keydown', function (event) {
        return onInstanceKeyDown(instanceID, event);
    });
    textElement.addEventListener('input', function () {
        return onContentInput(instanceID);
    });
}
exports.addTextElementListeners = addTextElementListeners;
function onFocus(instanceID, mouseEvent) {
    TextEditor_1.setActiveTextEditorID(instanceID);
    TrackChanges_1.startTrackingEdits(instanceID);
}
var onSelectionStart = function onSelectionStart(instanceID, mouseEvent) {
    onFocus(instanceID, mouseEvent);
    var textElement = EditorInstanceUtils_1.getEditorElement(instanceID);
    textElement.addEventListener('keyup', onSelectionEnd);
    document.addEventListener('mouseup', onSelectionEnd);
};
function onContentInput(instanceID) {
    TrackChanges_1.trackEdits(instanceID);
}
var onSelectionEnd = function onSelectionEnd(mouseEvent) {
    var textElement = TextEditor_1.getActiveTextEditor().element;
    textElement.removeEventListener('keyup', onSelectionEnd);
    document.removeEventListener('mouseup', onSelectionEnd);
    setTimeout(function () {
        if (window.getSelection().isCollapsed) return;
        GlobalEvents_1.getSignal(Constants_1.KWILL_CONSTS.events.SHOW_TEXT_FORMAT_POPUP).dispatch(mouseEvent);
    }, 10);
};
function onInstanceKeyDown(instanceID, keyboardEvent) {
    PreventContentDeletion_1.stopUserDeletingEditableElement(instanceID, keyboardEvent);
}
function removeTextElementListeners(instanceID) {
    SignalBindingsManager_1.clearSignalBindings(instanceID);
    var textElement = EditorInstanceUtils_1.getEditorElement(instanceID);
    var parentElement = textElement.parentElement;
    parentElement.replaceChild(textElement.cloneNode(true), textElement);
}
exports.removeTextElementListeners = removeTextElementListeners;