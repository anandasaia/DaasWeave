"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Kwil = void 0;
const dbid_1 = require("../utils/dbid");
const client_1 = __importDefault(require("../api_client/client"));
const funding_1 = require("../funder/funding");
const action_builder_1 = require("../builders/action_builder");
const base64_1 = require("../utils/base64");
const db_builder_1 = require("../builders/db_builder");
const drop_db_builder_1 = require("../builders/drop_db_builder");
const intern_1 = require("./intern");
/**
 * The main class for interacting with the Kwil network.
 */
class Kwil {
    constructor(opts) {
        this.client = new client_1.default({
            kwilProvider: opts.kwilProvider,
            apiKey: opts.apiKey,
            network: opts.network,
            timeout: opts.timeout,
            logging: opts.logging,
            logger: opts.logger,
        });
        (0, intern_1.wrap)(this, this.client.estimateCost.bind(this.client));
    }
    /**
     * Generates a unique database identifier (DBID) from the provided owner's Ethereum wallet address and a database name.
     *
     * @param owner - The owner's Ethereum wallet address. This should be a valid Ethereum address.
     * @param name - The name of the database. This should be a unique name to identify the database.
     * @returns A string that represents the unique identifier for the database.
     */
    getDBID(owner, name) {
        return (0, dbid_1.generateDBID)(owner, name);
    }
    /**
     * Retrieves the schema of a database given its unique identifier (DBID).
     *
     * @param dbid - The unique identifier of the database. The DBID can be generated using the kwil.getDBID method.
     * @returns A promise that resolves to the schema of the database.
     */
    getSchema(dbid) {
        return __awaiter(this, void 0, void 0, function* () {
            //check cache
            if (this.schemas && this.schemas.has(dbid)) {
                return this.schemas.get(dbid);
            }
            //fetch from server
            const res = yield this.client.getSchema(dbid);
            //cache result
            if (res.status == 200) {
                if (!this.schemas) {
                    this.schemas = new Map();
                }
                this.schemas.set(dbid, res);
            }
            return res;
        });
    }
    /**
     * Retrieves an account using the owner's Ethereum wallet address.
     *
     * @param owner - The owner's Ethereum wallet address. This should be a valid Ethereum address.
     * @returns A promise that resolves to an Account object. The account object includes the owner's address, balance, and nonce.
     */
    getAccount(owner) {
        return __awaiter(this, void 0, void 0, function* () {
            owner = owner.toLowerCase();
            return yield this.client.getAccount(owner);
        });
    }
    /**
     * Returns an instance of ActionBuilder for this client.
     *
     * @returns An ActionBuilder instance. ActionBuilder is used to build action transactions to be broadcasted to the Kwil network.
     */
    actionBuilder() {
        return action_builder_1.ActionBuilderImpl.of(this);
    }
    /**
     * Returns an instance of DBBuilder for this client.
     *
     * @returns A DBBuilder instance. DBBuilder is used to build new database transactions to be broadcasted to the Kwil network.
     */
    dbBuilder() {
        return db_builder_1.DBBuilderImpl.of(this);
    }
    /**
    * Returns an instance of Drop Database Builder for this client.
    *
    * @returns A Drop Database Builder instance. Drop Database Builder is used to build drop database transactions to be broadcasted to the Kwil network.
    */
    dropDBBuilder() {
        return drop_db_builder_1.DropDBBuilderImpl.of(this);
    }
    /**
     * Broadcasts a transaction on the network.
     *
     * @param tx - The transaction to broadcast. The transaction can be built using the ActionBuilder or DBBuilder.
     * @returns A promise that resolves to the receipt of the transaction. The transaction receipt includes the transaction hash, fee, and body.
     */
    broadcast(tx) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.broadcast(tx);
        });
    }
    /**
     * Lists all databases owned by a particular owner.
     *
     * @param owner - The owner's Ethereum wallet address. This should be a valid Ethereum address.
     * @returns A promise that resolves to a list of database names.
     */
    listDatabases(owner) {
        return __awaiter(this, void 0, void 0, function* () {
            owner = owner.toLowerCase();
            return yield this.client.listDatabases(owner);
        });
    }
    /**
     * Pings the server and gets a response.
     *
     * @returns A promise that resolves to a string indicating the server's response.
     */
    ping() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.client.ping();
        });
    }
    /**
     * Gets a funder object associated with a signer, which can be used for adding funds to a user's account.
     *
     * @param signer - The signer associated with the user's account. This can be a signer from Ethers v5 or Ethers v6.
     * @returns A promise that resolves to a Funder object.
     * @throws Will throw an error if it fails to get the funding config.
     */
    getFunder(signer) {
        return __awaiter(this, void 0, void 0, function* () {
            //check cache
            if (!this.fundingConfig || !this.fundingConfig.data) {
                this.fundingConfig = yield this.client.getFundingConfig();
                if (this.fundingConfig.status != 200 || !this.fundingConfig.data) {
                    throw new Error('Failed to get funding config.');
                }
            }
            return yield funding_1.Funder.create(signer, this.fundingConfig.data);
        });
    }
    /**
     * Performs a SELECT query on a database. The query must be a read-only query.
     *
     * @param dbid - The unique identifier of the database. The DBID can be generated using the kwil.getDBID method.
     * @param query - The SELECT query to execute.
     * @returns A promise that resolves to a list of objects resulting from the query.
     */
    selectQuery(dbid, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const q = {
                dbid: dbid,
                query: query,
            };
            let res = yield this.client.selectQuery(q);
            const uint8 = new Uint8Array((0, base64_1.base64ToBytes)(res.data));
            const decoder = new TextDecoder('utf-8');
            const jsonString = decoder.decode(uint8);
            return {
                status: res.status,
                data: JSON.parse(jsonString),
            };
        });
    }
}
exports.Kwil = Kwil;
//# sourceMappingURL=kwil.js.map