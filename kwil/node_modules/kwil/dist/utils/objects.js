"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.objects = exports.NillableError = void 0;
const NillablErrorSymbol = Symbol();
const NILL_ERROR_MESSAGE = 'value cannot be null or undefined';
class NillableError extends Error {
    constructor(message = NILL_ERROR_MESSAGE) {
        super(message || NILL_ERROR_MESSAGE);
    }
    get [NillablErrorSymbol]() {
        return true;
    }
}
exports.NillableError = NillableError;
exports.objects = {
    isNilError: (error) => {
        return error[NillablErrorSymbol] === true;
    },
    // returns true if the value is null or undefined,
    // else will return false.
    isNil: (value) => {
        return value === null || value === undefined;
    },
    // returns false if the value is null or undefined,
    // else will return true.
    isNotNil: (value) => {
        return !exports.objects.isNil(value);
    },
    // If value is null or undefined, then an error is thrown, else
    // value is returned.
    requireNonNil: (value, message) => {
        if (!exports.objects.isNil(value)) {
            // @ts-ignore: Unreachable code error
            return value;
        }
        if (typeof message === 'function') {
            throw message(value);
        }
        throw new NillableError(message);
    },
    // If value is null or undefined, then an error is thrown, else
    // value is returned.
    requireNonNilNumber: (value, message) => {
        if (typeof value === 'number') {
            return value;
        }
        if (typeof message === 'function') {
            throw message(value);
        }
        if (!value) {
            throw new NillableError(message);
        }
        throw new Error("value is not a number, it is a " + typeof value);
    },
};
//# sourceMappingURL=objects.js.map