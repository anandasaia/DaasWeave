export type Nil = null | undefined;
export type NonNil<T> = T extends Nil ? never : T;
export type Nillable<T> = T | Nil;
export type Supplier<T> = () => T;
export type Lazy<T> = (() => Promise<T>) | (() => T);
export type Func<T, U> = (t: T) => U;
export type Unary<T> = Func<T, T>;
export type Runnable = () => void;
export type Promisy<T> = T extends null | undefined ? never : T extends (() => infer R) | (() => Awaited<infer R>) ? T : T extends Function ? never : T;
export declare namespace Promisy {
    function resolve<T>(promisy: Promisy<T>): Promise<T>;
    function resolveOrReject<T>(promisy: Nillable<Promisy<T>>): Promise<T>;
}
export declare namespace Lazy {
    function of<T>(promisy: Promisy<T>): Lazy<Promise<T>>;
}
