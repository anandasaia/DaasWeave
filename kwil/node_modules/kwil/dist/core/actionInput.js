"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionInput = void 0;
const objects_1 = require("../utils/objects");
/**
 * `ActionInput` class is a utility class for creating action inputs.
 */
class ActionInput {
    constructor() {
        this.map = {};
    }
    /**
     * Adds or replaces a value for a single action input.
     *
     * @param key - The action input name.
     * @param value - The value to put for the action input.
     * @returns The current `ActionInput` instance for chaining.
     */
    put(key, value) {
        this.map[assertKey(key)] = value;
        return this;
    }
    /**
     * Adds a value for a single action input if the key is not already present.
     *
     * @param key - The action input name.
     * @param value - The value to put for the action input.
     * @returns The current `ActionInput` instance for chaining.
     */
    putIfAbsent(key, value) {
        if (!this.containsKey(key)) {
            this.map[key] = value;
        }
        return this;
    }
    /**
    * Replaces a value for a single action input if the key is already present.
    *
    * @param key - The action input name.
    * @param value - The value to replace for the action input.
    * @returns The current `ActionInput` instance for chaining.
    */
    replace(key, value) {
        if (this.containsKey(key)) {
            this.map[key] = value;
        }
        return this;
    }
    /**
     * Retrieves an action input value given its key.
     *
     * @param key - The action input name.
     * @returns The value associated with the action input name.
     */
    get(key) {
        return this.map[assertKey(key)];
    }
    /**
     * Retrieves a value by its action input name, or a default value if the action input name is not present.
     *
     * @param key - The action input name.
     * @param defaultValue - The default value to return if the key is not present.
     * @returns The value associated with the key, or the default value.
     */
    getOrDefault(key, defaultValue) {
        var _a;
        return ((_a = this.map[assertKey(key)]) !== null && _a !== void 0 ? _a : defaultValue);
    }
    /**
     * Checks if the map contains a specific action input name.
     *
     * @param key - The action input name.
     * @returns True if the action input name is present, false otherwise.
     */
    containsKey(key) {
        return this.map.hasOwnProperty(assertKey(key));
    }
    /**
     * Removes a action input name and its associated value from the map.
     *
     * @param key - The action input name to remove.
     * @returns True if the key was present and is now removed, false otherwise.
     */
    remove(key) {
        return delete this.map[key];
    }
    /**
    * Converts the map of action inputs to an array of entries.
    *
    * @param filter - An optional filter function.
    * @returns A read-only array of entries.
    */
    toArray(filter) {
        return Object
            .entries(this.map)
            .filter(filter !== null && filter !== void 0 ? filter : (() => true));
    }
    /**
     * Transforms the `ActionInput` to JSON.
     *
     * @returns A read-only map of entries.
     */
    toJSON() {
        return this.map;
    }
    /**
     * Allows `ActionInput` to be iterable.
     *
     * @returns An iterator over the array of entries.
     */
    [Symbol.iterator]() {
        return this.toArray()[Symbol.iterator]();
    }
    /**
     * Adds or replaces values from and object of action name/key-value pairs.
     *
     * @param obj - The object from which to extract action name/key-value pairs.
     * @returns The current `ActionInput` instance for chaining.
     */
    putFromObject(obj) {
        for (const [key, value] of Object.entries(objects_1.objects.requireNonNil(obj))) {
            this.map[assertKey(key)] = value;
        }
        return this;
    }
    /**
     * Adds values from and object of action name/key-value pairs if the key is not already present.
     *
     * @param obj - The object from which to extract key-value pairs.
     * @returns The current `ActionInput` instance for chaining.
     */
    putFromObjectIfAbsent(obj) {
        for (const [key, value] of Object.entries(objects_1.objects.requireNonNil(obj))) {
            if (!this.containsKey(key)) {
                this.map[assertKey(key)] = value;
            }
        }
        return this;
    }
    /**
     * Replaces values from and object of action name/key-value pairs if the key is already present.
     *
     * @param obj - The object from which to extract key-value pairs.
     * @returns The current `ActionInput` instance for chaining.
     */
    replaceFromObject(obj) {
        for (const [key, value] of Object.entries(objects_1.objects.requireNonNil(obj))) {
            if (this.containsKey(key)) {
                this.map[assertKey(key)] = value;
            }
        }
        return this;
    }
    /**
     * Creates multiple `ActionInput` instances from an array of objects.
     *
     * @param objs - An array of objects from which to create `ActionInput` instances.
     * @returns An array of `ActionInput` instances.
     */
    putFromObjects(objs) {
        const actions = [];
        for (const obj of objects_1.objects.requireNonNil(objs)) {
            actions.push(ActionInput.fromObject(obj));
        }
        return actions;
    }
    /**
    * Factory method to create a new instance of `ActionInput`.
    *
    * @returns A new `ActionInput` instance.
    */
    static of() {
        return new ActionInput();
    }
    /**
     * Creates a new `ActionInput` instance from an iterable array of entries.
     *
     * @param entries - The iterable of set of entries. Entries should be formatted as an array of `[inputName, value]`.
     * @returns A new `ActionInput` instance.
     */
    static from(entries) {
        const action = ActionInput.of();
        for (const [key, value] of objects_1.objects.requireNonNil(entries)) {
            action.map[assertKey(key)] = value;
        }
        return action;
    }
    /**
     * Creates a new `ActionInput` instance from an object.
     *
     * @param obj - The object from which to create the `ActionInput`.
     * @returns A new `ActionInput` instance.
     */
    static fromObject(obj) {
        const action = ActionInput.of();
        for (const [key, value] of Object.entries(objects_1.objects.requireNonNil(obj))) {
            action.map[assertKey(key)] = value;
        }
        return action;
    }
    /**
     * Creates multiple `ActionInput` instances from an array of objects.
     *
     * @param objs - An array of objects from which to create `ActionInput` instances.
     * @returns An array of `ActionInput` instances.
     */
    static fromObjects(objs) {
        const actions = [];
        for (const obj of objects_1.objects.requireNonNil(objs)) {
            actions.push(ActionInput.fromObject(obj));
        }
        return actions;
    }
}
exports.ActionInput = ActionInput;
/**
 * Asserts that a key is not null or undefined.
 *
 * @param key - The key to assert.
 * @returns The key if it is not null or undefined.
 * @throws Will throw an error if the key is null or undefined.
*/
function assertKey(key) {
    return objects_1.objects.requireNonNil(key, "key cannot be nil");
}
//# sourceMappingURL=actionInput.js.map