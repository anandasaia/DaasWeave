import { Nillable, NonNil } from "../utils/types";
import { Signature } from "./signature";
export declare enum PayloadType {
    INVALID_PAYLOAD_TYPE = 100,
    DEPLOY_DATABASE = 101,
    MODIFY_DATABASE = 102,
    DROP_DATABASE = 103,
    EXECUTE_ACTION = 104
}
export interface TxReceipt {
    get txHash(): string;
    get fee(): string;
    get body(): Nillable<string>;
}
export type TxnData = {
    hash: string;
    payload_type: PayloadType;
    payload: string;
    fee: string;
    nonce: number;
    signature: Signature;
    sender: string;
};
export interface DropDbPayload {
    owner: string;
    name: string;
}
export declare class Transaction implements TxnData {
    private readonly data;
    constructor(data?: NonNil<TxnData>);
    isSigned(): boolean;
    get hash(): string;
    get payload_type(): PayloadType;
    get payload(): string;
    get fee(): string;
    get nonce(): number;
    get signature(): Readonly<Signature>;
    get sender(): string;
    private toJSON;
}
export declare namespace Txn {
    function create(configure: (tx: TxnData) => void): NonNil<Transaction>;
    function copy(source: NonNil<Transaction>, configure: (tx: TxnData) => void): NonNil<Transaction>;
}
