import { ValueType } from "./enums";
export type Entry<T extends ValueType> = [string, T];
export type EntryType = Entry<ValueType>;
export type Entries = {
    [key: string]: ValueType;
};
export type Predicate = (k: [key: string, v: ValueType]) => boolean;
/**
 * `ActionInput` class is a utility class for creating action inputs.
 */
export declare class ActionInput implements Iterable<EntryType> {
    private readonly map;
    constructor();
    /**
     * Adds or replaces a value for a single action input.
     *
     * @param key - The action input name.
     * @param value - The value to put for the action input.
     * @returns The current `ActionInput` instance for chaining.
     */
    put<T extends ValueType>(key: string, value: T): ActionInput;
    /**
     * Adds a value for a single action input if the key is not already present.
     *
     * @param key - The action input name.
     * @param value - The value to put for the action input.
     * @returns The current `ActionInput` instance for chaining.
     */
    putIfAbsent<T extends ValueType>(key: string, value: T): ActionInput;
    /**
    * Replaces a value for a single action input if the key is already present.
    *
    * @param key - The action input name.
    * @param value - The value to replace for the action input.
    * @returns The current `ActionInput` instance for chaining.
    */
    replace<T extends ValueType>(key: string, value: T): ActionInput;
    /**
     * Retrieves an action input value given its key.
     *
     * @param key - The action input name.
     * @returns The value associated with the action input name.
     */
    get<T extends ValueType>(key: string): T;
    /**
     * Retrieves a value by its action input name, or a default value if the action input name is not present.
     *
     * @param key - The action input name.
     * @param defaultValue - The default value to return if the key is not present.
     * @returns The value associated with the key, or the default value.
     */
    getOrDefault<T extends ValueType>(key: string, defaultValue: T): T;
    /**
     * Checks if the map contains a specific action input name.
     *
     * @param key - The action input name.
     * @returns True if the action input name is present, false otherwise.
     */
    containsKey(key: string): boolean;
    /**
     * Removes a action input name and its associated value from the map.
     *
     * @param key - The action input name to remove.
     * @returns True if the key was present and is now removed, false otherwise.
     */
    remove(key: string): boolean;
    /**
    * Converts the map of action inputs to an array of entries.
    *
    * @param filter - An optional filter function.
    * @returns A read-only array of entries.
    */
    toArray(filter?: Predicate): ReadonlyArray<EntryType>;
    /**
     * Transforms the `ActionInput` to JSON.
     *
     * @returns A read-only map of entries.
     */
    private toJSON;
    /**
     * Allows `ActionInput` to be iterable.
     *
     * @returns An iterator over the array of entries.
     */
    [Symbol.iterator](): IterableIterator<EntryType>;
    /**
     * Adds or replaces values from and object of action name/key-value pairs.
     *
     * @param obj - The object from which to extract action name/key-value pairs.
     * @returns The current `ActionInput` instance for chaining.
     */
    putFromObject<T extends {}>(obj: T): ActionInput;
    /**
     * Adds values from and object of action name/key-value pairs if the key is not already present.
     *
     * @param obj - The object from which to extract key-value pairs.
     * @returns The current `ActionInput` instance for chaining.
     */
    putFromObjectIfAbsent<T extends {}>(obj: T): ActionInput;
    /**
     * Replaces values from and object of action name/key-value pairs if the key is already present.
     *
     * @param obj - The object from which to extract key-value pairs.
     * @returns The current `ActionInput` instance for chaining.
     */
    replaceFromObject<T extends {}>(obj: T): ActionInput;
    /**
     * Creates multiple `ActionInput` instances from an array of objects.
     *
     * @param objs - An array of objects from which to create `ActionInput` instances.
     * @returns An array of `ActionInput` instances.
     */
    putFromObjects<T extends {}>(objs: T[]): ActionInput[];
    /**
    * Factory method to create a new instance of `ActionInput`.
    *
    * @returns A new `ActionInput` instance.
    */
    static of(): ActionInput;
    /**
     * Creates a new `ActionInput` instance from an iterable array of entries.
     *
     * @param entries - The iterable of set of entries. Entries should be formatted as an array of `[inputName, value]`.
     * @returns A new `ActionInput` instance.
     */
    static from(entries: Iterable<EntryType>): ActionInput;
    /**
     * Creates a new `ActionInput` instance from an object.
     *
     * @param obj - The object from which to create the `ActionInput`.
     * @returns A new `ActionInput` instance.
     */
    static fromObject<T extends {}>(obj: T): ActionInput;
    /**
     * Creates multiple `ActionInput` instances from an array of objects.
     *
     * @param objs - An array of objects from which to create `ActionInput` instances.
     * @returns An array of `ActionInput` instances.
     */
    static fromObjects<T extends {}>(objs: T[]): ActionInput[];
}
