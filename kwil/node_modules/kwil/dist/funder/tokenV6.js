"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenV6 = void 0;
const ethers_1 = require("ethers");
const override_1 = require("./override");
class TokenV6 {
    constructor(tokenAddress, abi, provider) {
        this.contract = new ethers_1.ethers.Contract(tokenAddress, abi, provider);
        this.provider = provider;
    }
    getName() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.name) {
                this.name = this.contract['name()']();
            }
            return this.name;
        });
    }
    getSymbol() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.symbol) {
                this.symbol = this.contract['symbol()']();
            }
            return this.symbol;
        });
    }
    getDecimals() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.decimals) {
                this.decimals = this.contract['decimals()']();
            }
            return this.decimals;
        });
    }
    getTotalSupply() {
        if (!this.totalSupply) {
            this.totalSupply = this.contract['totalSupply()']();
        }
        return this.totalSupply;
    }
    getBalance(address) {
        return this.contract['balanceOf(address _owner)'](address);
    }
    getAllowance(owner, spender) {
        return this.contract['allowance(address _owner, address _spender)'](owner, spender);
    }
    // createOverride is a function to calculate method gas costs
    createOverride(method, args) {
        return (0, override_1.createOverride)(this.provider, this.contract, method, args);
    }
    approve(spender, amount, override) {
        if (!override) {
            override = this.createOverride('approve', [spender, amount]);
        }
        return this.contract["approve(address _spender, uint256 _value)"](spender, amount, override);
    }
}
exports.TokenV6 = TokenV6;
//# sourceMappingURL=tokenV6.js.map