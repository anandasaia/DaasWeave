"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EscrowV5 = exports.v5Override = void 0;
const ethers5_1 = require("ethers5");
function v5Override(provider, contract, method, args) {
    return __awaiter(this, void 0, void 0, function* () {
        // if provider is jsonrpc, then this gas esimates will be made by provider
        if (provider instanceof ethers5_1.ethers.providers.JsonRpcProvider) {
            return {};
        }
        let gas = yield contract.estimateGas[method](...args);
        const fee = yield contract.provider.getFeeData();
        // gas as ethers.BigNumber
        gas = ethers5_1.ethers.BigNumber.from(gas);
        // multiply by 1.3
        gas = gas.mul(13).div(10);
        return {
            gasPrice: fee.gasPrice,
            gasLimit: gas
        };
    });
}
exports.v5Override = v5Override;
class EscrowV5 {
    constructor(validatorAddress, poolAddress, abi, signer) {
        this.contract = new ethers5_1.Contract(poolAddress, abi, signer);
        this.signer = signer;
        this.validatorAddress = validatorAddress;
    }
    getTokenAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.tokenAddress) {
                return this.tokenAddress;
            }
            const addr = yield this.contract.escrowToken();
            this.tokenAddress = addr;
            return addr;
        });
    }
    getDepositedBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.contract.pools(this.validatorAddress, address);
        });
    }
    createOverride(method, args) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield v5Override(this.signer, this.contract, method, args);
        });
    }
    deposit(amount, override) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!override) {
                override = this.createOverride('deposit', [this.validatorAddress, amount]);
            }
            return yield this.contract.deposit(this.validatorAddress, amount, override);
        });
    }
}
exports.EscrowV5 = EscrowV5;
//# sourceMappingURL=escrowV5.js.map