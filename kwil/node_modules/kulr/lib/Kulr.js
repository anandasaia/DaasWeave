/// <reference path="../../typings/index.d.ts" />
"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var log = require("loglevel");
var Dictionary_1 = require("./dictionary/Dictionary");
var ColourPicker_1 = require("./ColourPicker");
var Observables_1 = require("./state/Observables");
var Options_1 = require("./options/Options");
/**
 * create a new instance
 * @param options
 * @returns {IKulrInstance}
 */
function createColourPicker(options) {
    var instance = void 0;
    //  test the options we've been given; are they valid?
    if (!Options_1.validateOptions(options)) return;
    //  create a new instance
    instance = new ColourPicker_1.ColourPicker(options);
    //  bootstrap the instance
    instance.bootstrap();
    //  save the instance
    Dictionary_1.saveInstance(instance, options.id);
    //  return the new colour picker instance
    return instance;
}
exports.createColourPicker = createColourPicker;
/**
 * retrieve an instance by id
 * @param id
 * @returns {IKulrInstance}
 */
function getColourPicker(id) {
    return Dictionary_1.getInstance(id);
}
exports.getColourPicker = getColourPicker;
/**
 * update the current colour for an instance
 * @param id
 * @param input //  rgb, hsl, hex
 */
function updateColourPicker(id, input) {
    try {
        getColourPicker(id).setColour(input);
    } catch (e) {
        log.warn('no colour picker instance found for id', id);
    }
}
exports.updateColourPicker = updateColourPicker;
/**
 * close all colour pickers
 */
function closeAllColourPickers() {
    Observables_1.activeID.next(null);
}
exports.closeAllColourPickers = closeAllColourPickers;