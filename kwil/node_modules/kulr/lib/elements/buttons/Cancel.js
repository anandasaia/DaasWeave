"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs/add/operator/take");
var ColourMixer_1 = require("../../colour/ColourMixer");
var Observables_1 = require("../../state/Observables");
var Constants_1 = require("../../constants/Constants");
var Find_1 = require("../../utils/dom/element/Find");
var savedHex = void 0;
/**
 * create a "cancel" button that restores the initial colour
 * @param options
 */
function createCancelButton(options) {
    //  listen for relevant observable events
    addListeners(options);
    //  find the button element
    var buttonElement = Find_1.findByRoleWithin(options.elements.selector, Constants_1.pickMeConstants.elements.CANCEL_BUTTON);
    //  add listeners to the button
    if (buttonElement) buttonElement.addEventListener('mouseup', function (event) {
        return cancelPicking(event);
    });
}
exports.createCancelButton = createCancelButton;
/**
 * add interaction listeners to the pane
 * @param options
 */
function addListeners(options) {
    //  when the active ID changes, grab the initial hex value and save it
    Observables_1.activeID.delay(150).subscribe(function (id) {
        if (options.id === id) ColourMixer_1.autoObservableHex.take(1).subscribe(function (hex) {
            return savedHex = hex;
        });
    });
}
/**
 * cancel colour picking, restore the first colour and close the picker
 * @param event
 */
function cancelPicking(event) {
    //  restore the saved colour
    ColourMixer_1.setObservableHSL(ColourMixer_1.inputToHSL(savedHex));
    //  close the colour picker
    Observables_1.activeID.next(null);
}