"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Clamp_1 = require("../../../utils/math/Clamp");
var Observables_1 = require("../../../state/Observables");
var PreventSelections_1 = require("../../../utils/dom/style/PreventSelections");
var huePane = void 0;
/**
 * when the user presses the mouse down, start tracking the mouse position
 * @param event
 */
function onHuePaneMouseDown(event) {
    //  save the element
    huePane = event.currentTarget;
    //  prevent selections
    PreventSelections_1.allowSelections(false);
    //  add listeners to the document
    huePane.ownerDocument.addEventListener('mousemove', getHueAtCursor);
    huePane.ownerDocument.addEventListener('mouseup', onMouseUp);
}
exports.onHuePaneMouseDown = onHuePaneMouseDown;
/**
 * calculate the hue at the current cursor position
 * @param event
 * @returns {number}
 */
function getHueAtCursor(event) {
    var client_rect = void 0,
        mouse_offset = void 0,
        hue = void 0;
    //  assume y offset is the one we want for now
    //TODO  add optional X offset so we could have a horizontal hue slider if needed
    //  get element bounding rect
    client_rect = huePane.getBoundingClientRect();
    //  calculate the offset of the mouse within the clicked element
    mouse_offset = event.pageY - client_rect.top;
    //  limit off set to between zero - rect height
    mouse_offset = Clamp_1.clamp(mouse_offset, 0, client_rect.height);
    //  and translate to hue
    hue = 1 - mouse_offset / client_rect.height;
    //  return the hue
    Observables_1.observableHue.next(hue * 360);
}
/**
 * when the user releases the mouse button, stop tracking the position
 * @param event
 */
var onMouseUp = function onMouseUp(event) {
    //  remove event listeners from the document
    event.currentTarget.removeEventListener('mousemove', getHueAtCursor);
    event.currentTarget.removeEventListener('mouseup', onMouseUp);
    //  allow selections
    PreventSelections_1.allowSelections(true);
};