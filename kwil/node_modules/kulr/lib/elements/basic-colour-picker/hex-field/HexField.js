"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Observables_1 = require("../../../state/Observables");
var Interactions_1 = require("./Interactions");
var ColourMixer_1 = require("../../../colour/ColourMixer");
var Validator_1 = require("../../../utils/colour/Validator");
var Constants_1 = require("../../../constants/Constants");
var Find_1 = require("../../../utils/dom/element/Find");
/**
 * create and populate a hex string input/output field
 * @param options
 */
function createHexField(options) {
    //  add listeners to the field
    addListeners(Find_1.findByRoleWithin(options.elements.selector, Constants_1.pickMeConstants.elements.HEX_FIELD), options);
}
exports.createHexField = createHexField;
/**
 * add interaction listeners to the field
 * @param field
 * @param options
 */
function addListeners(field, options) {
    Observables_1.activeID.takeUntil(options.destroy).subscribe(function (id) {
        return options.id === id ? activateField(field) : deactivateField(field);
    });
}
/**
 * activate the field; start listening for relevant events
 * @param field
 */
function activateField(field) {
    //  subscribe to hue updates, stopping when the active id changes
    ColourMixer_1.autoObservableHex.takeUntil(Observables_1.activeID).subscribe(function (hex) {
        //  when the observable hex value changes, update the field contents -
        //  but only if the user is not currently editing the value by hand
        if (field !== field.ownerDocument.activeElement) field.value = Validator_1.dehashString(hex);
    });
    //  listen for mouse interactions
    field.addEventListener('input', Interactions_1.onHexFieldInput);
}
/**
 * deactivate the field
 * @param field
 */
function deactivateField(field) {
    field.removeEventListener('input', Interactions_1.onHexFieldInput);
}