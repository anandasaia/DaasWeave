"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SvgUtils_1 = require("../../svg/SvgUtils");
var UniqueId_1 = require("../../../utils/UniqueId");
var Observables_1 = require("../../../state/Observables");
var Find_1 = require("../../../utils/dom/element/Find");
var Constants_1 = require("../../../constants/Constants");
/**
 * create and populate the tone-pane element
 * @param options
 * @return {SVGSVGElement}
 */
function populateTonePane(options) {
    //  find the tone-pane element
    var pane = Find_1.findByRoleWithin(options.elements.selector, Constants_1.pickMeConstants.elements.TONE_PANE);
    //  create SVG element
    var svg = SvgUtils_1.createSvg(pane);
    //  create an SVG rect and fill with the gradient
    SvgUtils_1.createColourPaneSVGElement(svg, createGradient(svg, '#ffffff', ['0', '0', '100%', '0']));
    SvgUtils_1.createColourPaneSVGElement(svg, createGradient(svg, '#000000', ['0', '100%', '0', '0']));
    //  listen for relevant events
    addListeners(pane, options);
    //  return the SVG element
    return svg;
}
exports.populateTonePane = populateTonePane;
/**
 * draw a gradient in the tone panel
 * @param svg
 * @param fill
 * @param direction
 * @return {string}
 */
function createGradient(svg, fill, direction) {
    var id = void 0,
        gradient = void 0,
        stops = void 0;
    //  create a unique id for the gradient
    id = UniqueId_1.getUniqueId('kulr-svg-gradient-');
    //  set the colours we're going to use in the gradient
    stops = [{
        colour: fill,
        offset: '0%'
    }, {
        colour: fill,
        opacity: '0',
        offset: '100%'
    }];
    //  create a gradient within the svg element
    gradient = SvgUtils_1.createSvgGradient(svg, id);
    //  set the gradient direction
    SvgUtils_1.setGradientDirection(gradient, direction);
    //  populate the gradient with the required colours
    SvgUtils_1.fillGradient(gradient, stops);
    //  return the gradient's id
    return id;
}
/**
 * add interaction listeners to the pane
 * @param pane
 * @param options
 */
function addListeners(pane, options) {
    Observables_1.activeID.subscribe(function (id) {
        if (id === options.id) activatePane(pane);
    });
}
/**
 * activate the pane; start listening for relevant events
 * @param pane
 */
function activatePane(pane) {
    //  subscribe to hue updates, stopping when the active id changes
    Observables_1.observableHue.takeUntil(Observables_1.activeID).subscribe(function (hue) {
        return onHueUpdate(pane, hue);
    });
}
/**
 * when the observable hue updates, update the pane
 * @param pane
 * @param hue
 */
function onHueUpdate(pane, hue) {
    pane.style.backgroundColor = 'hsl(' + hue + ',100%,50%)';
}