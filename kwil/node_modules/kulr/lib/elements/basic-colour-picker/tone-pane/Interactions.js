"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Clamp_1 = require("../../../utils/math/Clamp");
var Observables_1 = require("../../../state/Observables");
var PreventSelections_1 = require("../../../utils/dom/style/PreventSelections");
var tonePane = void 0;
/**
 * when the user presses the mouse down, start tracking the mouse position
 * @param event
 */
function onTonePaneMouseDown(event) {
    //  save the element
    tonePane = event.currentTarget;
    //  allow selections
    PreventSelections_1.allowSelections(false);
    //  add listeners to the document
    tonePane.ownerDocument.addEventListener('mousemove', getToneAtCursor);
    tonePane.ownerDocument.addEventListener('mouseup', onMouseUp);
}
exports.onTonePaneMouseDown = onTonePaneMouseDown;
/**
 * calculate the tone at the current cursor position
 * @param event
 * @returns {number}
 */
function getToneAtCursor(event) {
    var client_rect = void 0,
        mouse_offset_x = void 0,
        mouse_offset_y = void 0,
        saturation = void 0,
        lightness = void 0;
    //  assume y offset is the one we want for now
    //TODO  add optional X offset so we could have a horizontal hue slider if needed
    //  get element bounding rect
    client_rect = tonePane.getBoundingClientRect();
    //  calculate the offset of the mouse within the clicked element
    mouse_offset_x = (event.pageX - client_rect.left) / client_rect.width;
    mouse_offset_y = (event.pageY - client_rect.top) / client_rect.height;
    //  clamp offsets between 0-1;
    //  saturation is pretty easy and just goes from 0-1 as we go left-right
    saturation = Clamp_1.clamp(mouse_offset_x, 0, 1);
    //  lightness is a bit tricky because it's affected by both the X and Y axes;
    //  1 - 0.5
    //  |   |
    //  0 - 0
    //  so we want to deduct some of the sat value when in the top-right corner
    lightness = 1 - Clamp_1.clamp(mouse_offset_y, 0, 1);
    lightness -= saturation * 0.5 * lightness;
    //  set the observable saturation and lightness
    Observables_1.observableSaturation.next(saturation);
    Observables_1.observableLightness.next(lightness);
}
/**
 * when the user releases the mouse button, stop tracking the position
 * @param event
 */
var onMouseUp = function onMouseUp(event) {
    //  remove event listeners from the document
    event.currentTarget.removeEventListener('mousemove', getToneAtCursor);
    event.currentTarget.removeEventListener('mouseup', onMouseUp);
    //  allow selections
    PreventSelections_1.allowSelections(true);
};